	.cpu arm7tdmi
	.arch armv4t
	.fpu softvfp
	.eabi_attribute 20, 1
	.eabi_attribute 21, 1
	.eabi_attribute 23, 3
	.eabi_attribute 24, 1
	.eabi_attribute 25, 1
	.eabi_attribute 26, 1
	.eabi_attribute 30, 6
	.eabi_attribute 34, 0
	.eabi_attribute 18, 4
	.file	"ej_1.c"
	.text
	.align	2
	.global	separador
	.syntax unified
	.arm
	.type	separador, %function
separador:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 1, uses_anonymous_args = 0
	@ link register save eliminated.
	str	fp, [sp, #-4]!
	add	fp, sp, #0
	sub	sp, sp, #12
	str	r0, [fp, #-8]
	ldr	r3, [fp, #-8]
	cmp	r3, #32
	beq	.L2
	ldr	r3, [fp, #-8]
	cmp	r3, #9
	beq	.L2
	ldr	r3, [fp, #-8]
	cmp	r3, #10
	bne	.L3
.L2:
	mov	r3, #1
	b	.L5
.L3:
	mov	r3, #0
.L5:
	mov	r0, r3
	add	sp, fp, #0
	@ sp needed
	ldr	fp, [sp], #4
	bx	lr
	.size	separador, .-separador
	.section	.rodata
	.align	2
.LC0:
	.ascii	"%ld caracteres\012\000"
	.align	2
.LC1:
	.ascii	"%ld palabras\012\000"
	.align	2
.LC2:
	.ascii	"%ld lineas\012\000"
	.text
	.align	2
	.global	main
	.syntax unified
	.arm
	.type	main, %function
main:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 1, uses_anonymous_args = 0
	push	{fp, lr}
	add	fp, sp, #4
	sub	sp, sp, #24
	mov	r3, #0
	str	r3, [fp, #-8]
	mov	r3, #0
	str	r3, [fp, #-12]
	mov	r3, #1
	str	r3, [fp, #-16]
	mov	r3, #32
	str	r3, [fp, #-24]
	bl	getchar
	str	r0, [fp, #-20]
	b	.L7
.L10:
	ldr	r3, [fp, #-8]
	add	r3, r3, #1
	str	r3, [fp, #-8]
	ldr	r3, [fp, #-20]
	cmp	r3, #10
	bne	.L8
	ldr	r3, [fp, #-16]
	add	r3, r3, #1
	str	r3, [fp, #-16]
.L8:
	ldr	r0, [fp, #-20]
	bl	separador
	mov	r3, r0
	cmp	r3, #0
	bne	.L9
	ldr	r0, [fp, #-24]
	bl	separador
	mov	r3, r0
	cmp	r3, #0
	beq	.L9
	ldr	r3, [fp, #-12]
	add	r3, r3, #1
	str	r3, [fp, #-12]
.L9:
	ldr	r3, [fp, #-20]
	str	r3, [fp, #-24]
	bl	getchar
	str	r0, [fp, #-20]
.L7:
	ldr	r3, [fp, #-20]
	cmn	r3, #1
	bne	.L10
	ldr	r1, [fp, #-8]
	ldr	r0, .L12
	bl	printf
	ldr	r1, [fp, #-12]
	ldr	r0, .L12+4
	bl	printf
	ldr	r1, [fp, #-16]
	ldr	r0, .L12+8
	bl	printf
	mov	r3, #0
	mov	r0, r3
	sub	sp, fp, #4
	@ sp needed
	pop	{fp, lr}
	bx	lr
.L13:
	.align	2
.L12:
	.word	.LC0
	.word	.LC1
	.word	.LC2
	.size	main, .-main
	.ident	"GCC: (Arm GNU Toolchain 12.2.MPACBTI-Bet1 (Build arm-12-mpacbti.16)) 12.2.0"
